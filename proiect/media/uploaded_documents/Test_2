/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
  private ParserTree parseTree;
  public ParserTree getParseTree() { return parseTree; }
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal SEMICOLON, ADD, SUB, MUL, LPAR, RPAR, DIV, AND, OR, NOT, EQUAL, LT, GT, LE, GE, ASSIGN, CLPAR, CRPAR, SLPAR, SRPAR, COLON, COMMA, IF, THEN, WHILE, DO, READ, ELSE, BEGIN, END, PRINT, INT, BOOL, REAL, VAR, SIZE, FLOAT, FLOOR, CEIL, FUN, RETURN;
terminal Integer IVAL;        // our scanner provides numbers as integers
terminal Boolean BVAL;
terminal Float RVAL;
terminal String ID;

/* Non terminals */
non terminal ParserTree prog;
non terminal TreeNode block, declarations, declaration, var_declaration, type, array_dimensions, fun_declaration, fun_block, param_list, parameters, more_parameters, basic_declaration, basic_array_dimensions, program_body, fun_body, prog_stmts, prog_stmt, identifier, expr, bint_term, bint_factor, compare_op, int_expr, addop, int_term, mulop, int_factor, modifier_list, arguments, more_arguments;

/* Precedences */
precedence left ADD, SUB;
precedence left MUL;

/* The grammar rules */

prog ::= block:b {: 
		System.out.println("prog"); 
		parseTree = new ParserTree("prog");
		parseTree.addChild(b);
		RESULT = parseTree;
:};
       
block ::= declarations:ds program_body:pb {: 
	System.out.println("block"); 
    RESULT = new TreeNode("block");
    RESULT.addChild(ds);
	RESULT.addChild(pb);
:};
		
declarations ::= | declaration:d SEMICOLON declarations:ds        {: 
	System.out.println("dec " + "; " + " decs"); 
	RESULT = new TreeNode("declarations");
	RESULT.addChild(d);
:};

declaration ::= var_declaration:v                         {: 
	System.out.println("var_dec "); 
	v = new TreeNode("var_declaration");
	RESULT = v;
:}
              | fun_declaration:f                         {: 
	System.out.println("fun_dec "); 
	f = new TreeNode("fun_declaration");
	RESULT = f;
:};

var_declaration ::= VAR ID array_dimensions:a COLON type:t {: 
	System.out.println("VAR " + " ID " + " " + "array_dim" + " : " + "type"); 
:};

type ::= INT                                           {: 
	System.out.println("INT"); 

:}
       | REAL                                          {: 
	System.out.println("REAL"); 

:}
       | BOOL                                          {: 
System.out.println("BOOL"); 

:};

array_dimensions ::= SLPAR expr:e SRPAR array_dimensions:a {: 
	System.out.println("[" + " expr " + "]" + " array_dim"); 

:}
                 |                                             {: 
	System.out.println(); 

:};

fun_declaration ::= FUN ID param_list:p COLON type:t CLPAR fun_block:b CRPAR {: 
	System.out.println("FUN " + " ID " + " " + "pr_list" + " : " + "type" + " { " + "fun_block" + " } "); 

:};
				  
fun_block ::= declarations:d fun_body:f         {: 
	System.out.println("BEGIN " + "decs" + " " + "fun_body" + " END"); 

:};
			
param_list ::= LPAR parameters:p RPAR                    {: 
	System.out.println("(" + "pars" + ")"); 

:};
			 
parameters ::= basic_declaration:b more_parameters:m      {: 
	System.out.println("basic_dec" + " " + "more_par"); 

:}
            |                                              {: 
	System.out.println(); 

:};

more_parameters ::= COMMA basic_declaration:b more_parameters:m {: 
	System.out.println(", " + "basic_dec" + " " + "more_par"); 

:}
                 |                                              {: 
	System.out.println(); 

:};
  
basic_declaration ::= ID basic_array_dimensions:b COLON type:t                    {: 
	System.out.println("ID " + "basic_array_dim" + " : " + "type"); 

:};
			 
basic_array_dimensions ::= SLPAR SRPAR basic_array_dimensions:b     {: 
	System.out.println(" [ " + " ] " + "basic_array_dim"); 

:}
            |                                                {: 
	System.out.println(); 

:};

program_body ::= BEGIN prog_stmts:s END                   {: 
	System.out.println("BEGIN " + "prog_stmts" + " END"); 
	
:};
			   
fun_body ::= BEGIN prog_stmts:s RETURN expr:e SEMICOLON END {: 
	System.out.println("BEGIN " + "prog_stmts" + " RETURN " + "expr" + " SEMICOLON " + " END"); 

:};
		   
prog_stmts ::= prog_stmt:p SEMICOLON prog_stmts:s          {: 
	System.out.println("prog_stmt" + "; " + "prog_stmts"); 

:}
            |                                               {: 
	System.out.println(); 

:};

prog_stmt ::= IF expr:e THEN prog_stmt:t ELSE prog_stmt:f {: 
	System.out.println("IF " + "expr" + " THEN " + "prog_stmt" + " ELSE " + "prog_stmt"); 

:}
           | WHILE expr:e DO prog_stmt:t                  {: 
	System.out.println("WHILE " + "expr" + " DO " + "prog_stmt"); 

:}
           | READ identifier:i                            {: 
	System.out.println("READ " + "identifier"); 

:}
           | identifier:i ASSIGN expr:e                   {: 
	System.out.println("identifier" + " ASSIGN " + "expr"); 

:}
           | PRINT expr:e                                 {: 
	System.out.println("PRINT " + "expr"); 

:}
           | CLPAR block:b CRPAR                          {: 
	System.out.println("{ " + "block" + " }"); 

:};

identifier ::= ID array_dimensions:a                   {: 
	System.out.println("ID " + " " + "array_dim"); 

:};
			 
expr ::= expr:e OR bint_term:t                           {: 
	System.out.println("expr" + " OR " + "bint_term"); 

:}
       | bint_term:t                                    {: 
	System.out.println("bint_term"); 

:};

bint_term ::= bint_term:t AND bint_factor:f              {: 
	System.out.println("bint_term" + " AND " + "bint_factor"); 

:}
           | bint_factor:f                               {: 
	System.out.println("bint_factor"); 

:};

bint_factor ::= NOT bint_factor:f                       {: 
	System.out.println("NOT " + "bint_factor"); 

:}
             | int_expr:el compare_op:o int_expr:er       {: 
	System.out.println("int_expr" + " " + "comp_op" + " " + "int_expr"); 

:}
             | int_expr:e                                {: 
	System.out.println("int_expr"); 

:};

compare_op ::= EQUAL                                     {: 
	System.out.println("EQUAL"); 

:}
            | LT                                        {: 
	System.out.println("LT"); 

:}
            | GT                                        {: 
	System.out.println("GT"); 

:}
            | LE                                        {: 
	System.out.println("LE"); 

:}
            | GE                                        {: 
	System.out.println("GE"); 

:};

int_expr ::= int_expr:e addop:o int_term:t              {: 
	System.out.println("int_expr" + " " + "addop" + " " + "int_term"); 

:}
          | int_term:t                                   {: 
	System.out.println("int_term"); 

:};

addop ::= ADD                                            {: 
	System.out.println("ADD"); 

:}
       | SUB                                            {: 
	System.out.println("SUB"); 

:};

int_term ::= int_term:t mulop:m int_factor:f            {: 
	System.out.println("int_term" + " " + "mulop" + " " + "int_factor"); 

:}
          | int_factor:f                                  {: 
	System.out.println("int_factor"); 

:};

mulop ::= MUL                                            {: 
	System.out.println("MUL"); 

:}
       | DIV                                            {: 
	System.out.println("DIV"); 

:};

int_factor ::= LPAR expr:e RPAR                          {: 
	System.out.println("(" + "expr" + ")"); 

:}
           | SIZE LPAR ID basic_array_dimensions:b RPAR {: 
	System.out.println("SIZE (" + " ID " + "bassic_array_dim" + ")"); 

:}
           | FLOAT LPAR expr:e RPAR                      {: 
	System.out.println("FLOAT (" + " expr " + ")"); 

:}
           | FLOOR LPAR expr:e RPAR                      {: 
	System.out.println("FLOOR (" + " expr " + ")"); 

:}
           | CEIL LPAR expr:e RPAR                       {: 
	System.out.println("CEIL (" + " expr " + ")"); 

:}
           | ID modifier_list:m                        {: 
	System.out.println("ID" + " " + "mod_list"); 

:}
           | IVAL:i                                      {: 
	System.out.println("IVAL "); 

:}
           | RVAL:r                                      {: 
	System.out.println("RVAL "); 

:}
           | BVAL:b                                      {: 
	System.out.println("BVAL "); 

:}
           | SUB int_factor:f                            {: 
	System.out.println("SUB " + "int_fac"); 

:}
           ;

modifier_list ::= LPAR arguments:a RPAR                  {: 
	System.out.println("(" + "argm" + ")"); 

:}
               | array_dimensions:a                      {: 
	System.out.println("array_dim"); 

:};

arguments ::= expr:e more_arguments:m                  {: 
	System.out.println("expr" + " " + "more_argm"); 

:}
            |                                              {: 
	System.out.println(); 

:};

more_arguments ::= COMMA expr:e more_arguments:m         {: 
	System.out.println(", " + "expr" + " " + "more_argm"); 

:}
                 |                                           {: 
	System.out.println(); 

:}; 
